{"version":3,"file":"static/iframe.b3d2d9276561d75be3c5.bundle.js","sources":["webpack:///./src/index.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nlet animationId;\nconst sigmoid = x => x / (1 + Math.abs(x));\n\nclass NaturalDragAnimation extends Component {\n  static propTypes = {\n    isDragging: PropTypes.bool.isRequired,\n    style: PropTypes.shape().isRequired,\n    children: PropTypes.func.isRequired,\n    animationRotationFade: PropTypes.number,\n    rotationMultiplier: PropTypes.number,\n  };\n\n  static defaultProps = {\n    animationRotationFade: 0.9,\n    rotationMultiplier: 1.3,\n  };\n\n  state = {\n    transform: null,\n  };\n\n  velocity = 0;\n\n  prevX = 0;\n\n  rotation = 0;\n\n  componentDidUpdate(prevProps) {\n    if (!prevProps.isDragging && this.props.isDragging) {\n      animationId = requestAnimationFrame(this.patchTransform);\n    }\n\n    if (prevProps.isDragging && !this.props.isDragging) {\n      cancelAnimationFrame(animationId);\n    }\n  }\n\n  componentWillUnmount() {\n    cancelAnimationFrame(animationId);\n  }\n\n  patchTransform = () => {\n    const {\n      isDragging,\n      style,\n      animationRotationFade,\n      rotationMultiplier,\n    } = this.props;\n\n    if (isDragging && style.transform) {\n      const currentX = style.transform\n        .match(/translate\\(.{1,}\\)/g)[0]\n        .match(/-?[0-9]{1,}/g)[0];\n\n      this.velocity = currentX - this.prevX;\n      this.prevX = currentX;\n\n      this.rotation = this.rotation * animationRotationFade\n        + sigmoid(this.velocity) * rotationMultiplier;\n\n      const newTransform = `${style.transform} rotate(${this.rotation}deg)`;\n\n      if (Math.abs(this.rotation) < 0.01) this.rotation = 0;\n\n      this.setState({ transform: newTransform }, () => {\n        animationId = requestAnimationFrame(this.patchTransform);\n      });\n    } else {\n      animationId = requestAnimationFrame(this.patchTransform);\n    }\n  };\n\n  render() {\n    const style = this.props.isDragging\n      ? {\n        ...this.props.style,\n        transform: this.state.transform,\n      }\n      : this.props.style;\n\n    return <div>{this.props.children(style)}</div>;\n  }\n}\n\nexport default NaturalDragAnimation;\n"],"mappings":"AAGA","sourceRoot":""}