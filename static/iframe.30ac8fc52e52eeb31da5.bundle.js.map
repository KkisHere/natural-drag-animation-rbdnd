{"version":3,"file":"static/iframe.30ac8fc52e52eeb31da5.bundle.js","sources":["webpack:///./src/index.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nlet animationId;\nconst sigmoid = x => x / (1 + Math.abs(x));\nconst initialState = {\n  transform: null,\n  prevX: 0,\n  rotation: 0,\n};\n\nclass NaturalDragAnimation extends Component {\n  static propTypes = {\n    snapshot: PropTypes.shape({\n      isDragging: PropTypes.bool.isRequired,\n      dropAnimation: PropTypes.shape(),\n    }).isRequired,\n    style: PropTypes.shape().isRequired,\n    children: PropTypes.func.isRequired,\n    animationRotationFade: PropTypes.number,\n    rotationMultiplier: PropTypes.number,\n  };\n\n  static defaultProps = {\n    animationRotationFade: 0.9,\n    rotationMultiplier: 1.3,\n  };\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.snapshot.dropAnimation && state.transform) {\n      return {\n        ...initialState,\n      };\n    }\n\n    return null;\n  }\n\n  state = {\n    ...initialState,\n  };\n\n  componentDidUpdate(prevProps) {\n    if (!prevProps.snapshot.isDragging && this.props.snapshot.isDragging) {\n      animationId = requestAnimationFrame(this.patchTransform);\n    }\n\n    if (prevProps.snapshot.isDragging && !this.props.snapshot.isDragging) {\n      cancelAnimationFrame(animationId);\n    }\n  }\n\n  componentWillUnmount() {\n    cancelAnimationFrame(animationId);\n  }\n\n  patchTransform = () => {\n    const {\n      snapshot: {\n        isDragging,\n      },\n      style,\n      animationRotationFade,\n      rotationMultiplier,\n    } = this.props;\n\n    if (isDragging && style.transform) {\n      const currentX = style.transform\n        .match(/translate\\(.{1,}\\)/g)[0]\n        .match(/-?[0-9]{1,}/g)[0];\n\n      const velocity = currentX - this.state.prevX;\n      const prevRotation = this.state.rotation;\n\n      let rotation = prevRotation * animationRotationFade\n        + sigmoid(velocity) * rotationMultiplier;\n\n      const newTransform = `${style.transform} rotate(${rotation}deg)`;\n\n      if (Math.abs(rotation) < 0.01) rotation = 0;\n\n      this.setState({\n        transform: newTransform,\n        prevX: currentX,\n        rotation,\n      }, () => {\n        animationId = requestAnimationFrame(this.patchTransform);\n      });\n    } else {\n      animationId = requestAnimationFrame(this.patchTransform);\n    }\n  };\n\n  render() {\n    const { snapshot: { isDragging, dropAnimation } } = this.props;\n\n    const style = isDragging && !dropAnimation\n      ? {\n        ...this.props.style,\n        transform: this.state.transform,\n      }\n      : this.props.style;\n\n    return <div>{this.props.children(style)}</div>;\n  }\n}\n\nexport default NaturalDragAnimation;\n"],"mappings":"AAGA","sourceRoot":""}